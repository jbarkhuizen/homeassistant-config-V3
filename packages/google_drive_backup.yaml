# packages/google_drive_backup.yaml
# Complete Google Drive Backup Management Package
# Place this file in your packages/ directory

# Input selects for backup management
input_select:
  google_drive_backup_frequency:
    name: Google Drive Backup Frequency
    options:
      - "Daily"
      - "Every 12 Hours"
      - "Every 6 Hours"
      - "Manual Only"
    initial: "Daily"
    icon: mdi:backup-restore

  google_drive_retention_policy:
    name: Google Drive Retention Policy
    options:
      - "7 Local / 30 Cloud"
      - "14 Local / 60 Cloud"
      - "30 Local / 90 Cloud"
      - "Custom"
    initial: "7 Local / 30 Cloud"
    icon: mdi:calendar-range

# Input booleans for backup features
input_boolean:
  google_drive_backup_enabled:
    name: Google Drive Backup Enabled
    initial: true
    icon: mdi:cloud-upload

  google_drive_notifications_enabled:
    name: Google Drive Notifications Enabled
    initial: true
    icon: mdi:bell

  google_drive_emergency_backup_mode:
    name: Emergency Backup Mode
    initial: false
    icon: mdi:alert-circle

  google_drive_verbose_logging:
    name: Verbose Logging
    initial: false
    icon: mdi:text-box

# Advanced sensors
sensor:
  - platform: template
    sensors:
      google_drive_backup_efficiency:
        friendly_name: "Google Drive Backup Efficiency"
        value_template: >
          {% set last_backup = state_attr('sensor.backup_state', 'last_backup') %}
          {% set backup_size = state_attr('sensor.backup_state', 'size_in_google_drive') %}
          {% if last_backup and backup_size %}
            {% set efficiency = (backup_size / 1024 / 1024 / 1024) / 24 %}
            {{ efficiency | round(2) }}
          {% else %}
            0
          {% endif %}
        unit_of_measurement: "GB/hr"
        icon_template: mdi:speedometer

      google_drive_backup_trend:
        friendly_name: "Google Drive Backup Trend"
        value_template: >
          {% set backups_this_week = states('sensor.backup_state') %}
          {% if backups_this_week == 'backed_up' %}
            "Stable"
          {% elif backups_this_week == 'backing_up' %}
            "Active"
          {% else %}
            "Declining"
          {% endif %}
        icon_template: >
          {% if states('sensor.google_drive_backup_trend') == 'Stable' %}
            mdi:trending-up
          {% elif states('sensor.google_drive_backup_trend') == 'Active' %}
            mdi:trending-neutral
          {% else %}
            mdi:trending-down
          {% endif %}

      google_drive_storage_projection:
        friendly_name: "Google Drive Storage Projection"
        value_template: >
          {% set current_usage = state_attr('sensor.backup_state', 'size_in_google_drive') %}
          {% set daily_growth = 1.5 %}  # GB per day estimated
          {% if current_usage %}
            {% set days_remaining = (15000000000 - current_usage) / (daily_growth * 1024 * 1024 * 1024) %}
            {{ days_remaining | round(0) }}
          {% else %}
            365
          {% endif %}
        unit_of_measurement: "days"
        icon_template: mdi:calendar-clock

      google_drive_backup_score:
        friendly_name: "Google Drive Backup Score"
        value_template: >
          {% set health = 1 if is_state('binary_sensor.google_drive_backup_health', 'on') else 0 %}
          {% set frequency = 1 if states('sensor.google_drive_last_backup') != 'Never' else 0 %}
          {% set size_efficiency = 1 if states('sensor.google_drive_backup_size') != 'Unknown' else 0 %}
          {% set total_score = (health + frequency + size_efficiency) * 33.33 %}
          {{ total_score | round(0) }}
        unit_of_measurement: "%"
        icon_template: >
          {% set score = states('sensor.google_drive_backup_score') | int(0) %}
          {% if score >= 90 %}
            mdi:shield-check
          {% elif score >= 70 %}
            mdi:shield
          {% elif score >= 50 %}
            mdi:shield-alert
          {% else %}
            mdi:shield-off
          {% endif %}

# Binary sensors for advanced monitoring
binary_sensor:
  - platform: template
    sensors:
      google_drive_backup_window_active:
        friendly_name: "Google Drive Backup Window Active"
        value_template: >
          {% set current_hour = now().hour %}
          {{ current_hour >= 9 and current_hour <= 11 }}
        icon_template: >
          {% if is_state('binary_sensor.google_drive_backup_window_active', 'on') %}
            mdi:clock-check
          {% else %}
            mdi:clock-outline
          {% endif %}

      google_drive_system_ready_for_backup:
        friendly_name: "System Ready for Google Drive Backup"
        value_template: >
          {% set cpu_temp = states('sensor.johanba_server_system_temperature') | float(0) %}
          {% set memory = states('sensor.johanba_server_memory_usage') | float(0) %}
          {% set disk_free = states('sensor.home_assistant_host_disk_free') | float(0) %}
          {% set wan_connected = is_state('binary_sensor.archer_d2_wan_status', 'on') %}
          {{ cpu_temp < 65 and memory < 85 and disk_free > 5 and wan_connected }}
        icon_template: >
          {% if is_state('binary_sensor.google_drive_system_ready_for_backup', 'on') %}
            mdi:check-circle
          {% else %}
            mdi:alert-circle
          {% endif %}

# Utility scripts for advanced management
script:
  google_drive_backup_with_validation:
    alias: "Google Drive Backup with Validation"
    description: "Create backup with pre and post validation"
    sequence:
      # Pre-backup validation
      - service: telegram_bot.send_message # Replace with your actual device name
        data:
          title: "🔍 Pre-Backup Validation"
          message: "Running system validation before backup..."

      # Check system readiness
      - condition: state
        entity_id: binary_sensor.google_drive_system_ready_for_backup
        state: "on"

      # Log backup start
      - service: system_log.write
        data:
          message: "Google Drive backup validation started - System ready"
          level: info

      # Create backup
      - service: hassio.backup_full
        data:
          name: "Validated_GDrive_{{ now().strftime('%Y%m%d_%H%M%S') }}"
          compressed: true

      # Wait for completion
      - delay:
          minutes: 10

      # Post-backup validation
      - service: telegram_bot.send_message # Replace with your actual device name
        data:
          title: "✅ Backup Validation Complete"
          message: >
            Backup created and validated successfully!

            Backup Details:
            • Name: Validated_GDrive_{{ now().strftime('%Y%m%d_%H%M%S') }}
            • Status: {{ states('sensor.google_drive_backup_status') }}
            • Size: {{ states('sensor.google_drive_backup_size') }}
            • Health Score: {{ states('sensor.google_drive_backup_score') }}%
          data:
            tag: "validated_backup"

  google_drive_emergency_protocol:
    alias: "Google Drive Emergency Protocol"
    description: "Emergency backup protocol for critical situations"
    sequence:
      # Enable emergency mode
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.google_drive_emergency_backup_mode

      # Immediate notifications
      - service: telegram_bot.send_message # Replace with your actual device name
        data:
          title: "🚨 EMERGENCY BACKUP PROTOCOL ACTIVATED"
          message: >
            Emergency backup protocol has been activated!
            Creating immediate backup of critical data.
          data:
            tag: "emergency_protocol"
            actions:
              - action: "ABORT_EMERGENCY"
                title: "Abort"
              - action: "CONTINUE_EMERGENCY"
                title: "Continue"

      # Create emergency backup
      - service: hassio.backup_full
        data:
          name: "EMERGENCY_CRITICAL_{{ now().strftime('%Y%m%d_%H%M%S') }}"
          compressed: true

      # Send critical notifications
      - service: notify.email_ha
        data:
          title: "🚨 EMERGENCY BACKUP PROTOCOL EXECUTED"
          message: |
            EMERGENCY BACKUP PROTOCOL HAS BEEN EXECUTED

            EMERGENCY DETAILS:
            • Protocol Activated: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
            • Backup Name: EMERGENCY_CRITICAL_{{ now().strftime('%Y%m%d_%H%M%S') }}
            • System Status: Critical backup in progress

            SYSTEM STATE:
            • HA Version: {{ states('sensor.home_assistant_core_version') }}
            • Disk Free: {{ states('sensor.home_assistant_host_disk_free') }}GB
            • Memory: {{ states('sensor.johanba_server_memory_usage') }}%
            • Temperature: {{ states('sensor.johanba_server_system_temperature') }}°C
            • WAN Status: {{ 'Connected' if is_state('binary_sensor.archer_d2_wan_status', 'on') else 'Disconnected' }}

            This emergency backup contains your complete Home Assistant configuration
            and has been prioritized for immediate upload to Google Drive.

            BACKUP REDUNDANCY:
            • Google Drive: Emergency backup in progress
            • OneDrive: {{ states('sensor.onedrive_status_simple') }}

            Monitor backup completion through Home Assistant interface.

      # Wait for completion
      - delay:
          minutes: 15

      # Disable emergency mode
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.google_drive_emergency_backup_mode

      # Completion notification
      - service: telegram_bot.send_message # Replace with your actual device name
        data:
          title: "✅ Emergency Protocol Complete"
          message: >
            Emergency backup protocol completed successfully.
            Critical data has been secured to Google Drive.
          data:
            tag: "emergency_complete"

  google_drive_monthly_maintenance:
    alias: "Google Drive Monthly Maintenance"
    description: "Comprehensive monthly maintenance routine"
    sequence:
      # Start maintenance notification
      - service: telegram_bot.send_message # Replace with your actual device name
        data:
          title: "🔧 Monthly Google Drive Maintenance"
          message: "Starting comprehensive monthly maintenance..."

      # Health check
      - service: script.google_drive_backup_health_check
      - delay:
          minutes: 2

      # Cleanup old backups
      - service: script.cleanup_google_drive_backups
      - delay:
          minutes: 3

      # Validate current backup
      - service: script.google_drive_backup_with_validation
      - delay:
          minutes: 12

      # Generate comprehensive report
      - service: notify.email_ha
        data:
          title: "📊 Monthly Google Drive Maintenance Report"
          message: |
            MONTHLY GOOGLE DRIVE MAINTENANCE COMPLETED
            Maintenance Date: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}

            MAINTENANCE ACTIVITIES COMPLETED:
            ✅ Health check performed
            ✅ Old backups cleaned up
            ✅ New validated backup created
            ✅ System optimization completed

            CURRENT STATUS:
            • Backup Status: {{ states('sensor.google_drive_backup_status') }}
            • Health Score: {{ states('sensor.google_drive_backup_score') }}%
            • Last Backup: {{ states('sensor.google_drive_last_backup') }}
            • Backup Size: {{ states('sensor.google_drive_backup_size') }}
            • Storage Projection: {{ states('sensor.google_drive_storage_projection') }} days

            DUAL BACKUP COMPARISON:
            • Google Drive Status: {{ states('sensor.google_drive_backup_status') }}
            • OneDrive Status: {{ states('sensor.onedrive_status_simple') }}
            • OneDrive Usage: {{ states('sensor.onedrive_usage_percentage') }}%

            SYSTEM PERFORMANCE:
            • HA Version: {{ states('sensor.home_assistant_core_version') }}
            • OS Version: {{ states('sensor.home_assistant_operating_system_version') }}
            • Disk Free: {{ states('sensor.home_assistant_host_disk_free') }}GB
            • Memory Usage: {{ states('sensor.johanba_server_memory_usage') }}%
            • CPU Temperature: {{ states('sensor.johanba_server_system_temperature') }}°C
            • Backup Efficiency: {{ states('sensor.google_drive_backup_efficiency') }} GB/hr

            SECURITY & CONNECTIVITY:
            • WAN Connection: {{ 'Stable ✅' if is_state('binary_sensor.archer_d2_wan_status', 'on') else 'Issues ❌' }}
            • External IP: {{ states('sensor.archer_d2_external_ip_2') }}
            • Tailscale VPN: Active
            • AdGuard Home: Active

            RECOMMENDATIONS:
            {% if states('sensor.google_drive_backup_score') | int(0) < 80 %}
            ⚠️ Backup score below optimal ({{ states('sensor.google_drive_backup_score') }}%)
            {% endif %}
            {% if states('sensor.google_drive_storage_projection') | int(0) < 90 %}
            ⚠️ Google Drive storage may fill in {{ states('sensor.google_drive_storage_projection') }} days
            {% endif %}
            {% if states('sensor.johanba_server_system_temperature') | float(0) > 60 %}
            ⚠️ System temperature elevated ({{ states('sensor.johanba_server_system_temperature') }}°C)
            {% endif %}

            Your Google Drive backup system is providing reliable protection alongside OneDrive redundancy.
            Next maintenance scheduled for {{ (now() + timedelta(days=30)).strftime('%Y-%m-%d') }}.

      # Final notification
      - service: telegram_bot.send_message # Replace with your actual device name
        data:
          title: "✅ Monthly Maintenance Complete"
          message: >
            Monthly Google Drive maintenance completed successfully!
            Backup Score: {{ states('sensor.google_drive_backup_score') }}%
            Next maintenance: {{ (now() + timedelta(days=30)).strftime('%Y-%m-%d') }}
          data:
            tag: "maintenance_complete"

# Additional automations for advanced management
automation:
  # Dynamic backup frequency adjustment
  - id: google_drive_dynamic_backup_frequency
    alias: "Google Drive Dynamic Backup Frequency"
    description: "Adjust backup frequency based on system activity"
    trigger:
      - platform: state
        entity_id: sensor.johanba_server_memory_usage
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.google_drive_backup_enabled
        state: "on"
    action:
      - choose:
          # High activity - increase frequency
          - conditions:
              - condition: template
                value_template: "{{ states('sensor.johanba_server_memory_usage') | float(0) > 70 }}"
            sequence:
              - service: input_select.select_option
                target:
                  entity_id: input_select.google_drive_backup_frequency
                data:
                  option: "Every 6 Hours"
              - service: telegram_bot.send_message # Replace with your actual device name
                data:
                  title: "🔄 Backup Frequency Increased"
                  message: "High system activity detected. Backup frequency increased to every 6 hours."
          # Normal activity
          - conditions:
              - condition: template
                value_template: "{{ states('sensor.johanba_server_memory_usage') | float(0) <= 70 }}"
            sequence:
              - service: input_select.select_option
                target:
                  entity_id: input_select.google_drive_backup_frequency
                data:
                  option: "Daily"

  # Backup score monitoring
  - id: google_drive_backup_score_alert
    alias: "Google Drive Backup Score Alert"
    description: "Alert when backup score drops below threshold"
    trigger:
      - platform: numeric_state
        entity_id: sensor.google_drive_backup_score
        below: 70
        for:
          hours: 2
    condition:
      - condition: state
        entity_id: input_boolean.google_drive_notifications_enabled
        state: "on"
    action:
      - service: telegram_bot.send_message # Replace with your actual device name
        data:
          title: "📉 Backup Score Alert"
          message: >
            Google Drive backup score has dropped to {{ states('sensor.google_drive_backup_score') }}%

            Investigating backup system health...
          data:
            tag: "backup_score_alert"
            actions:
              - action: "RUN_DIAGNOSTICS"
                title: "Run Diagnostics"
              - action: "FORCE_BACKUP"
                title: "Force Backup"

      # Automatically run health check
      - service: script.google_drive_backup_health_check

# Dashboard card configuration (for Lovelace)
# Add this to your dashboard configuration
lovelace_cards:
  google_drive_backup_status_card:
    type: entities
    title: "Google Drive Backup Status"
    show_header_toggle: false
    entities:
      - entity: sensor.google_drive_backup_status
        name: "Current Status"
      - entity: sensor.google_drive_backup_score
        name: "Health Score"
      - entity: sensor.google_drive_last_backup
        name: "Last Backup"
      - entity: sensor.google_drive_next_backup
        name: "Next Backup"
      - entity: sensor.google_drive_backup_size
        name: "Backup Size"
      - entity: binary_sensor.google_drive_backup_health
        name: "System Health"
      - entity: input_boolean.google_drive_backup_enabled
        name: "Auto Backup"
      - entity: input_select.google_drive_backup_frequency
        name: "Frequency"

  google_drive_backup_controls_card:
    type: horizontal-stack
    cards:
      - type: button
        entity: script.create_google_drive_backup
        name: "Manual Backup"
        icon: mdi:backup-restore
        tap_action:
          action: call-service
          service: script.create_google_drive_backup
      - type: button
        entity: script.google_drive_backup_health_check
        name: "Health Check"
        icon: mdi:heart-pulse
        tap_action:
          action: call-service
          service: script.google_drive_backup_health_check
      - type: button
        entity: script.google_drive_emergency_protocol
        name: "Emergency"
        icon: mdi:alert-circle
        tap_action:
          action: call-service
          service: script.google_drive_emergency_protocol
